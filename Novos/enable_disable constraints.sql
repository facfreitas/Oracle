rem-- Realised by Patch-Adams
rem-- Email: robert.thibault@ssss.gouv.qc.ca
rem-- 
rem-- This script disabled or enabled all constraints in user.
rem-- 
rem-- How use it
rem-- Run this script on the user "owner" with SQLPLUSW.EXE
rem-- Call PAK_DISABLE_ENABLED_CONSTRAINT.CALL__DISABLE for disabled all constraints in user
rem-- Call PAK_DISABLE_ENABLED_CONSTRAINT.CALL__ENABLE for enabled all constraints in user
rem-- 


CREATE OR REPLACE PACKAGE PAK_DISABLE_ENABLED_CONSTRAINT IS
PROCEDURE CALL__DISABLE;
PROCEDURE CALL__ENABLE;

FUNCTION VERIF_STATUS(STATUS IN VARCHAR2) RETURN NUMBER;

PRAGMA RESTRICT_REFERENCES(VERIF_STATUS,WNDS,WNPS);
END;
/


CREATE OR REPLACE PACKAGE BODY PAK_DISABLE_ENABLED_CONSTRAINT IS

FUNCTION VERIF_STATUS(STATUS IN VARCHAR2) RETURN NUMBER IS
V_COUNT NUMBER(37):=0;

BEGIN
SELECT
COUNT(USC.CONSTRAINT_NAME)
INTO V_COUNT 
FROM USER_CONSTRAINTS USC
WHERE USC.CONSTRAINT_TYPE IN('P','R')
AND USC.STATUS = STATUS;

IF V_COUNT = 0 THEN
RETURN V_COUNT;
ELSE
RETURN V_COUNT;
END IF;

EXCEPTION 
WHEN OTHERS THEN
RETURN 0;
END;

PROCEDURE EXECUTE_STRING(T_STRING IN VARCHAR2) IS
V_CURSOR INTEGER;
V_DUMMY INTEGER;
BEGIN
V_CURSOR := DBMS_SQL.OPEN_CURSOR;

DBMS_SQL.PARSE(V_CURSOR, T_STRING, DBMS_SQL.NATIVE);

V_DUMMY := DBMS_SQL.EXECUTE(V_CURSOR);

DBMS_SQL.CLOSE_CURSOR(V_CURSOR);
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('NE FONCTIONNE PAS');
END;

PROCEDURE PROC_DISABLE_CONSTRAINT IS

V_STRING VARCHAR2(1000);

CURSOR CUR_DISABLE_CONS IS
SELECT
'ALTER TABLE '||USC.TABLE_NAME||' DISABLE CONSTRAINT '||USC.CONSTRAINT_NAME||' CASCADE'
FROM USER_CONSTRAINTS USC
WHERE USC.CONSTRAINT_TYPE = 'P'
AND USC.STATUS = 'ENABLED';
BEGIN
OPEN CUR_DISABLE_CONS;
LOOP
FETCH CUR_DISABLE_CONS INTO V_STRING;
EXIT WHEN CUR_DISABLE_CONS%NOTFOUND;

EXECUTE_STRING(V_STRING);

END LOOP;
CLOSE CUR_DISABLE_CONS;

EXCEPTION
WHEN OTHERS THEN
CLOSE CUR_DISABLE_CONS;
END;

PROCEDURE PROC_ENABLED_CONSTRAINT IS

V_STRING VARCHAR2(1000);

CURSOR CUR_ENABLE_CONS IS
SELECT
'ALTER TABLE '||USC.TABLE_NAME||' ENABLE CONSTRAINT '||USC.CONSTRAINT_NAME
FROM USER_CONSTRAINTS USC
WHERE USC.CONSTRAINT_TYPE in ('P','R')
AND USC.STATUS = 'DISABLED'
ORDER BY 1;
BEGIN
OPEN CUR_ENABLE_CONS;
LOOP
FETCH CUR_ENABLE_CONS INTO V_STRING;
EXIT WHEN CUR_ENABLE_CONS%NOTFOUND;

EXECUTE_STRING(V_STRING);

END LOOP;
CLOSE CUR_ENABLE_CONS;

EXCEPTION
WHEN OTHERS THEN
CLOSE CUR_ENABLE_CONS;
END;

PROCEDURE CALL__DISABLE IS

V_BOOL NUMBER(37):=0;
T_COMPTEUR NUMBER(37) := 0;
BEGIN

PROC_DISABLE_CONSTRAINT;

V_BOOL := VERIF_STATUS('ENABLED');

WHILE V_BOOL <> 0 AND T_COMPTEUR <4 LOOP
T_COMPTEUR := T_COMPTEUR +1;

PROC_DISABLE_CONSTRAINT;

V_BOOL := VERIF_STATUS('ENABLED');

END LOOP;
END;

PROCEDURE CALL__ENABLE IS
V_BOOL NUMBER(37):=0;
T_COMPTEUR NUMBER(37) := 0;
BEGIN

PROC_ENABLED_CONSTRAINT;

V_BOOL := VERIF_STATUS('DISABLED');

WHILE V_BOOL <> 0 AND T_COMPTEUR <3 LOOP
T_COMPTEUR := T_COMPTEUR +1;

PROC_ENABLED_CONSTRAINT;

V_BOOL := VERIF_STATUS('DISABLED');

END LOOP;
END;

END;
/